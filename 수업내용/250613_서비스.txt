핫 사이트(Active - Standby 구성)

가상머신 3대
2대 컴터이름 web01, web02, nginx 설치
1대 컴터이름 db01, 마리아디비 설치, 초기설정

서버 : 서비스를 제공하는 프로그램

클라이언트 : 서비스를 이용하는 프로그램

웹서버 : 웹서비스를 제공하는 프로그램
ex) apache, httpd, nginx

웹 어플리케이션 서버 : 서버 컴퓨터에서 코드를 실행하고 코드의 결과만 제공하는 서버

웹 서비스 : 클라이언트가 요청한 파일을 다운로드 할 수 있게 해주는 서비스

root /var/www/wordpress - 요 안에있는것만 

1. 워드프레스 서버
  1) 필요한 프로그램 설치
	apt update
	sudo apt install nginx php-fpm php-mysql php-cli php-curl php-gd php-mbstring php-xml php-xmlrpc php-zip unzip -y
	systemctl restart php8.1-fpm
	systemctl restart nginx


  2) 워드프레스 다운 및 설치
	다운로드
	wget https://ko.wordpress.org/latest-ko_KR.zip
	
	압축 해제
	unzip latest-ko_KR.zip

	폴더 옮기기
	mv wordpress /var/www/wordpress

	권한 설정
	chown -R www-data:www-data /var/www/wordpress
	chmod -R 755 /var/www/wordpress




  3) 웹 서버 설정
	ln -s /etc/nginx/sites-available/wordpress /etc/nginx/sites-enabled/
	rm /etc/nginx/sites-enabled/default

	vi /etc/nginx/sites-available/wordpress
server {
    listen 80;
    server_name localhost;

    root /var/www/wordpress;
    index index.php index.html index.htm;

    location / {
        try_files $uri $uri/ /index.php?$args;
    }

    location ~ \.php$ {
        include snippets/fastcgi-php.conf;
        fastcgi_pass unix:/run/php/php8.1-fpm.sock;
    }

    location ~ /\.ht {
        deny all;
    }
}
	

  4) 웹 서버 실행
	systemctl restart nginx

  5) 웹 브라우저로 접속
	http://서버IP/

  6) 워드프레스 설정
	한국어 -> 시작합니다! -> DB 이름, IP, ID, PW 설정 -> 설치 진행 -> 워드 프레스 설치 
					DB서버에서 생성한 DB랑 계정

2번째 web02도 똑같이 ㄱㄱ

로그인 페이지 요청
					로그인 페이지 응답
ID, PW 로그인 요청
					SELECT
로그인 결과

글 작성 페이지 요청
					글 작성 페이지 응답
글 내용 작성 요청

세션으로 글 작성 사용자를 판별
개발자 도구에서 쿠키값을 복붙해서 가져가버리면 해당 유저의 정보로 로그인이 가능함


쿠키 : 웹 브라우저에 저장되는 정보, JS 코드로 접근 가능한 것과 아닌 것이 있음
http only 설정이 되어있으면 접근 못하고 체크가 안되어있다면 접근 가능

document.cookie : js로 쿠키 접근하는 코드

세션 : 일반적으로 WAS의 메모리에 저장된다.


부하 분산하고 로그인하면 다시 로그인을 요구하는 문제가 발생한다.

테스트 방법

워드프레스 설정 -> url을 haproxy 주소로 변경

haproxy 설정

listen stats
    bind *:9000
    mode  http
    option dontlog-normal
    stats enable
    stats realm Haproxy\ Statistics
    stats uri /stats

frontend webserver
	bind *:80
	mode http
	default_backend nginx-server

backend nginx-server
	mode http
	balance roundrobin
	option httpchk GET /
	server nginx1 192.168.110.10:80 check
	server nginx2 192.168.110.11:80 check	


로그인 페이지 요청 ----------> 1번 컴퓨터로 감
			  <-----------	로그인 페이지 응답
ID, PW 로그인 요청 -------------> 2번
					SELECT해서 있으면 세션에 정보 저장
					관리자 페이지로 가도록 응답
관리자 페이지 요청 --------------> 1번 서버에서는 세션에 정보가 없으니까
			   <---------------	로그인부터 하도록 로그인 페이지 응답

위 문제를 해결하기 위해서는 세션 정보를 DB에 저장해야함
-> DB 부하가 너무 심해진다.

따라서 웹 브라우저에 암호화를 통해서 저장시킴
-> jwt.io를 통해서 해석해보면 secret이 나오는데 해당 값 때문에 보안이 가능
-> 특정 웹브라우저에서 하프록시로 접속할때 접속되었던 서버로만 보내게 한다.
-> 단점도 존재하는데 만약 3명의 유저가 있는데 1번 3번 유저가 1번 서버를 사용하고
2번만 2번 서버를 사용하는데 하필 1번 3번 유저는 활동 시간이 많은 유저라면
1번 서버의 부하만 증가하게된다.

세션 클러스터링 - 메모리 낭비가 심함

로그인 관련 용어
	일반적인 로그인 방식 : 쿠키와 세션을 이용하는 방식
	
	쿠키 : 웹 브라우저 저장되는 정보

	세션 : 일반적으로 서버의 메모리에 저장되는 정보 - 복사 가능, 디비 저장 가능, 등등 다른곳에도 저장가능

	세션 클러스터링 : 여러 대의 서버가 똑같은 세션 정보를 모두 저장 - 메모리 부하가 심해서 낭비가 심해지는 대신 빠름

	스티키 세션 : 부하분산 장치에서 원래 갔던 곳으로만 가게 하는 설정 - 부하분산이 안될 수 있지만 빠름

스티키 세션 방식 구현

haproxy 설정

listen stats
    bind *:9000
    mode  http
    option dontlog-normal
    stats enable
    stats realm Haproxy\ Statistics
    stats uri /stats

frontend webserver
	bind *:80
	mode http
	default_backend nginx-server

backend nginx-server
	mode http
	balance roundrobin
	cookie SERVERID insert indirect nocache
	option httpchk GET /
	server nginx1 192.168.110.10:80 check cookie nginx1
	server nginx2 192.168.110.11:80 check cookie nginx2


was 와 db 실습

1. DB 서버 설정
  1) DB 및 테이블 생성
	mariadb -u root -p
		계정 생성 및 권한 설정

		DROP DATABASE IF EXISTS web;

		CREATE DATABASE web;

		USE web;

		CREATE TABLE users (
		    id INT AUTO_INCREMENT PRIMARY KEY,
		    username VARCHAR(50) NOT NULL UNIQUE,
		    password VARCHAR(255) NOT NULL
		);
	
		CREATE TABLE posts (
		    id INT AUTO_INCREMENT PRIMARY KEY,
		    title VARCHAR(100) NOT NULL,
		    content TEXT NOT NULL,
		    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
		    user_id INT,
		    FOREIGN KEY (user_id) REFERENCES users(id)
		);


2. WAS 서버 설정
  1) 자바 설치
	apt update
	apt install -y openjdk-17-jdk net-tools

  2) 톰캣 다운로드
	wget https://dlcdn.apache.org/tomcat/tomcat-10/v10.1.42/bin/apache-tomcat-10.1.42.tar.gz

  3) 톰캣 압축 해제
	tar zxvf apache-tomcat-10.1.42.tar.gz

  4) 폴더 이동
	mv apache-tomcat-10.1.42 /usr/local/tomcat10

  5) JSP 코드 파일 생성
	rm -rf /usr/local/tomcat10/webapps/ROOT/*

	vi /usr/local/tomcat10/webapps/ROOT/db.jsp
<%@ page import="java.sql.*" %>
<%
    String dbURL = "jdbc:mariadb://[DB 서버 IP]:3306/web";
    String dbUser = "[DB 계정]";
    String dbPassword = "[DB 비밀번호]";
    Connection conn = null;
    try {
        Class.forName("org.mariadb.jdbc.Driver");
        conn = DriverManager.getConnection(dbURL, dbUser, dbPassword);
        System.out.println("DB success!");
    } catch (Exception e) {
        e.printStackTrace();
        response.setContentType("text/html;charset=UTF-8");
        out.println("DB failed!");
    }
%>


  6) 라이브러리 다운
	cd /usr/local/tomcat10/lib
	wget http://192.0.0.100:10000/mariadb%2djava%2dclient%2d3.3.3.jar

  7) 톰캣 실행
	/usr/local/tomcat10/bin/shutdown.sh

	/usr/local/tomcat10/bin/startup.sh

  8) 톰캣 실행 확인
	ps -ef | grep /usr/bin/java
	netstat -anlp | grep :8080

	윈도우에서 웹 브라우저로 접속 http://[톰캣 서버의 IP주소]:8080/db.jsp 로 접속하면
	DB success! 라고 나와야 함


web 과 was


1. WEB 서버 설정
  1) 설치
	apt update
	apt install -y nginx

  2) 설정
	rm /etc/nginx/sites-enabled/default
	vi /etc/nginx/sites-enabled/web
upstream tomcat_backend {
        server 10.10.10.20:8080;
}

server {
        listen 80 default_server;
        listen [::]:80 default_server;

        root /var/www/web;

        index index.html index.htm index.nginx-debian.html;

        server_name _;

        location / {
                try_files $uri $uri/ =404;
        }


        location /api {
            rewrite ^/api(/.*)$ $1 break;
            proxy_pass http://tomcat_backend;  # 업스트림 그룹으로 프록시
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
}

  3) html 파일 다운 및 압축 해제
	mkdir /var/www/web
	chown -R www-data:www-data /var/www/web
	chmod -R 755 /var/www/web
	cd /var/www/web
	wget http://192.0.0.100:10000/html.tar.gz
	tar zxvf html.tar.gz



2. WAS 서버 설정
  1) jsp 파일  다운 및 압축 해제
	cd /usr/local/tomcat10/webapps/ROOT
	wget http://192.0.0.100:10000/jsp.tar.gz
	tar zxvf jsp.tar.gz

index - 세기, 목차

sql injection - asdf' or '1'='1'##

select * from users where username = "" + username + "" and password = "" + password + "";

1. 입력값 검증

2. 로직 변경

3. 라이브러리 변경
	

월요일 평가

3계층 구성

DB 양방향 레플리케이션

01. ERD를 보고 create 문을 이용해서 테이블을 생성하시오.

02. fromt.html로 접속하면 '이니션ㄹ fromt server'라고 나와야함 (파일 직접 생성)

03. /api/back.jsp로 접속하면 새로고침 눌렀을 때 서버 IP가 번갈아가면서 나와야 함(코드는 밑에)
nginx 서버에 설정 추가
톰캣 서버에 /usr/local/tomcat10/webapps/ROOR에 back.jsp 파일 생성

04. 강사 컴퓨터에서 접속할 수 있도록 설정하시오.
포트포워딩

05. /api/insert.jsp 파일에 알맞은 SQL을 작성하고 nginx 서버의 /insert.html로 접속해서 테스트
06. /api/select.jsp 파일에 알맞은 SQL을 작성하시오. nginx 서버의 /api/select.jsp로 접속해서 테스트
단, 06~07 insert.jsp는 master 서버로 연결되게 하고 select.jsp는 slave 서버로 연결되게 설정하시오.

07. DB 서버에 데이터가 동기화 되는지 확인