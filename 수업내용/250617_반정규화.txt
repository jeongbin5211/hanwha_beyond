프로젝트 기획안

소개
	간단한 소개
	왜
	타당한 이유(통계 자료, 뉴스 기사)

비교
	기존 서비스와의 비교(차별점)

시나리오
	누가 우리 서비스를 어떻게 이용하는가


--------------------------------------------
반정규화 실습

DROP DATABASE learn;
CREATE DATABASE learn;
USE learn;
CREATE TABLE student (
    idx INT AUTO_INCREMENT PRIMARY KEY,
    email VARCHAR(30),
    nickname VARCHAR(20),
    createdAt DATETIME DEFAULT NOW()
);
CREATE TABLE course (
    idx INT AUTO_INCREMENT PRIMARY KEY,
    contents VARCHAR(100),
    createdAt DATETIME DEFAULT NOW()
);
CREATE TABLE likes(
	idx INT AUTO_INCREMENT PRIMARY KEY,
    studentIdx INT,
    courseIdx INT,
	createdAt DATETIME DEFAULT NOW(),
    FOREIGN KEY (studentIdx) REFERENCES student(idx),
    FOREIGN KEY (courseIdx) REFERENCES course(idx)
);

INSERT INTO student(email, nickname) VALUES 
('test01@test.com', 'test01'),
('test02@test.com', 'test02'),
('test03@test.com', 'test03'),
('test04@test.com', 'test04'),
('test05@test.com', 'test05');

INSERT INTO course(contents) VALUES 
('DB 강의 반정규화 내용'),
('DB 강의 인덱스'),
('DB 강의 저장 프로시저');

# INSERT INTO likes(studentIdx, courseIdx) VALUES 
# (1,1),(1,2),(1,3),(2,1),(2,2),(3,1),(4,1),(4,3),(5,1),(5,2),(5,3);

SELECT * FROM course;

# 반정규화 전 좋아요 수와 함께 출력
SELECT *, COUNT(likes.idx) FROM course JOIN likes ON course.idx = likes.courseIdx GROUP BY courseIdx;


# 반정규화, 좋아요 수를 course 테이블에 저장 
ALTER TABLE course ADD likes INT DEFAULT 0;


# 4번 학생이 2번 강의를 좋아요 한다.
SET AUTOCOMMIT = FALSE;
START TRANSACTION;
	INSERT INTO likes(studentIdx, courseIdx) VALUES (4,2);
	UPDATE course SET likes = likes + 1 WHERE idx = 2;
COMMIT;

# 반정규화 후 좋아요 수와 함께 출력
SELECT * FROM course;

트랜잭션의 어려운점 - 동시성 제어
위 같은 상황은 좋아요 수가 일정 수 이상 올라가면 정확성이 굳이 필요없어진다.
따라서 어떤 속도를 중요하게 여길지가 관건






