HTTP (HTTPS -> SSL/TLS)

HTTP 요청 프로토콜

HTTP 응답 프로토콜

HTTP 프로토콜 - 7계층

HTML - 문서작성 웹 페이지를 채울 내용

CSS - 문서작성 웹 페이지를 디자인

Javascript - 웹 페이지 기능


HTTP 프로토콜 - 보통 1.1을 사용중(99%), 우리나라 대표 테크 기업 2.0, 전 세계 선도 기업 3.0

HTTP 1.0의 특징
"연결 수립, 동작, 연결 해제"의 단순함이 특징 -> 하나의 URL은 하나의 TCP 연결

- 네트워크의 부하가 심함
3Way Handshake
HTTP 요청
HTTP 응답
연결종료
.
.
.
 

HTTP 요청 프로토콜 구조

Request Line - 요청 타입(http 메서드) / 공백 / URL or URI / 공백 / HTTP 버전
Headers 
	Cookie - 서버로부터 받은 쿠키를 다시 서버에게 보내주는 역할을 한다.
		   - 웹 브라우저에 저장되는 사용자 정보
		JS코드로 접근 가능한 쿠키 : 프론트엔드 개발자가 JS 코드로 설정 가능
		HTTP로만 접근 가능한 쿠키 - 보안이 더 뛰어나다/ 백엔드 개발자가 HTTP 프로토콜로만 설정 가능
		
	Host - 요청된 URl에 나타난 호스트명을 상세하게 표시
	User-Agent - Client Program에 대한 식별 가능 정보를 제공

공백
Body

http메소드 종류 - 크게 GET, POST가 있다. 다른 것들도 있지만 저 둘만 확실히 알자

GET - Client가 서버로부터 문서를 읽어오려 할 때 사용
- 개발자 도구 payload에서 보내는 내용 확인 가능

POST - Client 가 서버에게 어떤 정보를 전송할 때 사용

PUT - Client가 서버에 특정 자원을 업로드할 때 사용

PATCH - PUT과 비슷함, 기존 파일에서 변경 사항만을 포함

DELETE - 서버에서 문서를 제거

OPTION - 클라가 서버에게 사용 가능한 옵션을 징의하기 위해 사용


URI (Identifier == id)

https://comic.naver.com(port번호 생략 : 443)/webtoon/list.nhn?titleId=1111&weekday=??
프로토콜 ip (port) ~~ / 

URL (Locator = 실제 폴더안에 있는 어떤 경로)
- 네트워크 상에서 자원이 어디 있는지를 알려주기 위한 규약이다.

내도메인.한국 가입하기

갑자기 DNS

DNS(domain name system) 
- 호스트의 도메인 이름을 네트워크 주소로 바꾸거나 그 반대의 변환을 수행할 수 있도록 해줌
- 일반적으로 www.naver.com 과 같은 도메인 주소를 입력하면 192.168.0.100 과 같은 ip 주소로 변환해준다.


내컴퓨터 - 로컬 DNS() - 루트 DNS (.) (전 세계에 딱 14대 있음 a부터 14번째 알파벳까지)
	      		       - 최상위 DNS
			       - 책임 DNS 

내컴퓨터는 ip, netmask, 게이트웨이, dns 주소를 로컬 DNS로 전달한다.
로컬 DNS는 내컴퓨터에서 설정한 ip, netmask, gw 얻어와서 상위 DNS들에게 도메인 주소를 물어본다.


www.ddarahakit.com 은 맨 뒤에 .이 생략되어있다.
그래서 주소를 읽을 때 역순으로 읽어들인다.

로컬 DNS 는 루트 DNS한테 com.을 물어보고 루트 DNS는 답해준다.
이후 최상위 DNS한테 ddarahakit.com. 을 물어본다.
최상위 DNS는 로컬 DNS한테 해당되는 IP주소를 알려준다.
이후 다시 로컬 DNS는 책임 DNS한테 www.ddarahakit.com. 을 물어보고
책임DNS는 로컬 DNS한테 해당되는 IP주소를 알려준다.
이제 로컬 DNS에서 내컴퓨터로 전달.

내도메인.한국에서 도메인 등록
hjb.kro.kr

루트 DNS .
최상위 DNS kr
세컨드 DNS kro
책임 DNS hjb

가상머신 1대 nginx 설치 및 실행

이후 nginx ip를 내도메인.한국에서 고급설정에 IP연결에 등록후 www.hjb.kro.kr로 접속
고급 설정 IP에는 다른사람이 접속할 수 있는 IP주소를 적어줘야한다.

HTTP 응답 프로토콜 구조

statusline - http 버전 / 공백 / 상태 코드 / 공백 / 상태 문구

상태 코드 200번!, 400번대, 500번대 가 중요함

200 - 상태문구 OK - 클라이언트 요청이 성공했다는 의미

400번대 - 클라이언트의 실수, 잘못, 오류
	403번 - Forbidden - 클라이언트가 권한이 없는 페이지를 요청했을 때
	404번 - Not Found - 클라이언트가 서버에 없는 페이지를 요청했을 때

500번대 - 서버의 실수, 잘못, 오류
	500번 - Internal Server Error - 서버의 일부가 멈췄ㄱ거나 설정 오류가 발생
	503번 - Service Unavailable - 최대 Session 수를 초과했을 때

header
	Content-Length - 메시지 바디 길이를 나타낼 때 쓰인다.
	Content-Type - 메시지 바디에 들어있는 컨텐츠 종류 ( Ex: HTML 문서는 text/html)


body



HTTP 프로토콜 정리
	요청
		메소드 URL HTTP/1.1
			메소드 : GET(URL에 데이터 포함), POST(바디에 포함)
			URL : 양식://도메인주소:포트번호/경로?쿼리
					  IP 주소                   
		헤더(Cookie 중요)
		
		바디 : 데이터 포함
	응답
		HTTP/1.1 상태코드 상태메시지
			상태코드 : 200, 400(프론트 잘못), 500(백 잘못)
		헤더(Set-Cookie)

		바디

HTTPS : HTTP + SSL

웹소켓 + SSL = WSS

SMTP + SSL = ??

현재의 SSL = TLS 1.3 과 동일하다. TLS가 SSL을 대체하게 되었는데 TLS를 그냥 SSL로 부르기로 함

HTTP로 로그인하면 서버측에 아이디가 그대로 보여진다.

평문 : 우리가 알아볼 수 있는 글씨

암호문 : 우리가 알아볼 수 없는 글씨

암호화 : 평문을 암호문으로 바꾸는것

복호화 : 암호문을 평문으로 바꾸는 것
	
키 : 암호화, 복호화 하는데 필요한 정보 

	대칭키 암호화 : 암호화, 복호화하는데 사용하는 키가 같은 것 - 각 사용자마다 키를 따로 생성
		사용자가 많으면 키의 수가 많아짐 - n(n-1)/2
		암호화 알고리즘이 쉬움 -> 암호화가 빠름
		DES, AES(와이파이 패스워드에서 쓰임)

	비대칭키 암호화 : 암호화, 복호화하는데 사용하는 키가 다른 것 - 각 사용자마다 본인의 2개의 키를 생성
		키의 수 : 2N (개인키, 공개키)
		암호화 알고리즘이 복잡합 -> 암호화가 느림
		개인키로 암호화를 했다면 공개키로 복호화를 할 수 있다.
		특정 키로 암호화하면 세트인 키로만 복호화를 할 수 있다.
		공개키로 암호화를 했다면 개인키로 복호화를 할 수 있다.
		개인키는 공유하지 않고 공개키는 아무에게나 공유함
		
		두 대상이 통신할 떄 제 3자 인증기관이 서로의 공개키가 맞다 아니다를 인증해주는 과정이 있다.
		인증기관은 도메인주소의 공개키를 인증해줌
		


	SSL은 대칭키, 비대칭키 둘 다 사용

-> 완벽한정리 https://tls12.xargs.org/

ZeroSSL 에서 내가 만들어뒀던 도메인 인증서

설정했다면 NGINX 선택 후 다운로드

certificate.crt - 인증서 파일
인증서 파일 안의 공개 키로 암호화한것은 private key로만 복호화 할 수 있다.

이 파일을 리눅스에 옮기면 됨
vi /etc/nginx/sites_enabled

이후 리눅스에서 nginx설정

server {
	listen 443 ssl;

	root /var/www/html;
}


전체 과정 요약

1. 내도메인.한국 가입 후 도메인 생성, 도메인에 A 레코드 설정 (www = IP 주소)
2. ssl 인증서 발급 : zerossl에서 인증서 발급
3. 서버에 ssl 적용 : nginx 서버 설정 파일에 ssl 인증서 파일 적용
mkdir /etc/nginx/ssl
제로SSL에 받은 인증서 파일을 /etc/nginx/ssl 에 압축 풀기
cat certificate.crt ca_bundle.crt > fullchain.pem	

rm -rf /etc/nginx/sites-enabled/default
vi /etc/nginx/sites-enabled/default

server {
	listen 80;
	server_name www.yourdomain.kro.kr;
	return 301 https://$host$request_uri;
}

server {
	listen 443 ssl;
	server_name www.yourdomain.kro.kr;

	root /var/www/html;
	index index.html index.htm;

	ssl_certificate /etc/nginx/ssl/fullchain.pem;   # 또는 yourdomain.crt
	ssl_certificate_key /etc/nginx/ssl/private.key;

	location / {
		try_files $uri $uri/ /index.php?$args;
	}
}


풀채인 :  crt를 둘 다 합친것

systemctl restart nginx


-----------------------------------
html 실습

vscode 에서 live server 플러그인 설치


톰캣 설치하고 jsp 파일 생성 하고 html 파일로 통신 test
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%
    String var01 = request.getParameter("abc");
    String var02 = request.getParameter("def");

    out.println(var01);
    out.println(var02);
%>

이제 nginx에서 해봄 -> 안전하지 않은 ~~~
-> 톰캣도 ssl 설정이 필요해서 그렇다.
-> nginx 설정파일에 ssl 설정한곳에 추가

1. nginx 서버 설정 추가
	vi /etc/nginx/sites-enabled/default
		location /api {
	            rewrite ^/api(/.*)$ $1 break;
	            proxy_pass http://[톰캣 IP 주소]:8080;  
	            proxy_set_header Host $host;
	            proxy_set_header X-Real-IP $remote_addr;
	            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
	            proxy_set_header X-Forwarded-Proto $scheme;
	        }
	systemctl restart nginx

2. nginx 서버에 html 파일 생성
	vi /var/www/html/form.html
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <form method="get" action="/api/data.jsp">
        이메일 : <input type="text" name="abc"> <br>
        비밀번호 : <input type="password" name="def"> <br>
        <button>전송하기버튼</button>
    </form>
</body>

</html>

3. 톰캣 서버 설정
	 vi /usr/local/tomcat10/webapps/ROOT/data.jsp
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%
    String var01 = request.getParameter("abc");
    String var02 = request.getParameter("def");

    out.println(var01);
    out.println(var02);
%>


