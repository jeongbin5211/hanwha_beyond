01. 트랜잭션 (Transaction)

02. 트랜잭션 원칙
원자성(Atomicity) : 트랜잭션의 작업은 모두 수행되거나 모두 수행되지 않아야 한다.
트랜잭션 도중에 문제가 발생하면 작업은 전부 취소되고 이전 상태로 돌아간다.

일관성 (Consistency) : 트랜잭션이 시작되기 전과 후의 데이터베이스는 항상 일관성 있는 상태여야 한다.

고립성 (Isolation) : 동시에 여러 트랜잭션이 실행될 때 각 트랜잭션은 독립적으로 실행된 것처럼 보인다.
다른 트랜잭션이 실행 중인 데이터를 읽거나 수정할 수 없다.

지속성 (Durability) : 트랜잭션이 완료되면 그 결과는 영구적으로 데이터베이스에 반영되어야 하며, 시스템 장애가 발생하더라도 유지된다.

프로그램 HDD

프로세스 RAM
	스레드 세이프 : 여러 스레드가 여러 작업을 동시에 수행했을 때 각각 작업을 따로 실행했을 때와 
	같은 결과를 내는 것
	스레드	스레드


트랜잭션 실습

use sakila;

# autocommit 설정 확인하기
show variables like '%autocommit%';

# autocommit 끄기
set autocommit = FALSE; 

CREATE DATABASE bank;
use bank;

CREATE TABLE accounts (
	id int primary key auto_increment,
    name varchar(50),
    balance int
);

insert into accounts (name, balance) values
('a', 10),
('b', 20),
('c', 30),
('d', 40),
('e', 50);

select * from accounts;

start transaction;
update accounts set balance = balance + 200 where name = 'a';
update accounts set balance = balance + 200 where name = 'b';
commit;

# ROLLBACK : 전부 다 취소
# COMMIT : 전부 다 실행

고립성 실습

트랜잭션이 다른 트랜잭션과 격리되는 수준을 정의합니다. SQL 표준에서 정의된 4가지 격리 수준은 다음과 같습니다.
 
Read Uncommitted: 한 트랜잭션이 커밋되지 않은 데이터를 다른 트랜잭션이 읽을 수 있다. (Dirty Read 발생 가능)
Read Committed: 커밋된 데이터만 읽을 수 있다. 다른 트랜잭션이 커밋되지 않은 데이터를 읽을 수 없다.
Repeatable Read: 같은 트랜잭션 내에서 읽은 데이터는 트랜잭션이 끝날 때까지 일관되게 유지된다. (Phantom Read 방지 불가능)
Serializable: 트랜잭션들이 마치 직렬로 실행된 것처럼 완벽하게 격리된다. 가장 높은 격리 수준. 성능 저하 발생
 
ex) SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

# 트랜잭션 레벨 확인
select @@tx_isolation;

# 트랜잭션 레벨 변경
SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
SET SESSION TRANSACTION ISOLATION LEVEL READ Committed;
SET SESSION TRANSACTION ISOLATION LEVEL Repeatable Read;

cmd에서 cd C:\Program Files\MySQL\MySQL Workbench 8.0 CE
mysql -u hjb -p -h 192.168.110.18

트랜잭션 레벨은 클라이언트별로 설정 가능하다.

한쪽이 수정중일 때 다른 쪽에서 조회해보기

1. Read Uncommitted 상태에서 dirty read 상황 구현

		작업 방향 ------------->

워크벤치	트랜잭션 시작		수정			롤백


mysql.exe	트랜잭션 시작	조회		조회				커밋

2. Read Committed 레벨에서 Dirty Read 문제 해결한 상황 확인
3. Read Committed 레벨에서 Non-Repeatable Read 상황 확인 - 한 트랜잭션 내에서 같은 정보를 조회했는데 다른 내용이 조회되는 상황

		작업 방향 ------------->

워크벤치	트랜잭션 시작		수정			롤백


mysql.exe	트랜잭션 시작	조회		조회				커밋

4. Repeatable Read 레벨에서 상황 확인 - Non-Repeatable Read 문제를 해결

5. Repeatable Read 레벨에서 Phantom Read 문제 - insert 했을 때 발생

		작업 방향 ------------->

워크벤치	트랜잭션 시작			INSERT			롤백


mysql.exe	트랜잭션 시작	조회				조회				커밋

#Phantom Read 문제 확인
insert into accounts (name, balance) values
('h', 4000);

# Mysql, Mariadb 스토리지 엔진 : MyISAM, InnoDB
# InnoDB는 팬텀리드가 생기지 않는다.

# 서버에 접속해 있는 클라이언트의 수 확인
SHOW STATUS LIKE 'Threads_connected';

# 최대 세션 연결 허용 수 확인 
SHOW VARIABLES LIKE 'max_connections';

세션 수 확인 실습 - 백엔드 서버를 하나 연결하면 접속해있는 클라이언트의 수가 1만 증가할까??

리눅스 vm 준비
apt update
apt install -y openjdk-17-jdk

java --version

백엔드 서버 프로젝트 다운
wget http://222.112.28.162:10000/back%2d0.0.1%2dSNAPSHOT.jar

os 환경변수 설정
export DB_URL=jdbc:mariadb://192.168.110.18:3306/bank
export DB_USERNAME=hjb
export DB_PASSWORD=qwer1234

java -jar back-0.0.1-SNAPSHOT.jar

연결 후 결과는 10개나 증가한 상태이다.
왜일까? 기본값이 10개라서

Minimum pool size
Maximum pool size

# 최대 세션 연결 수 변경
SET GLOBAL max_connections = 200;

부하 테스트

JMeter 설치

MariaDB java client 다운

1. Jmeter 설정
  1) 다운 및 압축 해제

  2) DB 컨넥터 추가
	mariadb-java-client-3.3.3.jar 파일 다운하고 jmeter 압축 푼 곳\lib 폴더로 옮기기

  3) 실행
	압축 푼 폴더\bin\jmeter.bat

  4) 설정
	Test Plan 우클릭 -> Add -> Threads -> Thread Group
		Number of Thread : 접속자 수				100
		Ramp-up period : 접속자가 접속하는 시간		1
		Loop Count : 반복 횟수					1

	Thread Group 우클릭 -> Add -> Config Element -> JDBC Connection Configuration 
		Variable Name for created pool : dbpool
		Validation Query : select 1
		Database URL : jdbc:mariadb://[DB 서버 IP 주소]:3306/[DB 이름]
		JDBC Driver class : org.mariadb.jdbc.Driver
		Username : DB 서버에 접속할 ID
		Password : DB 서버에 접속할 PW

	Thread Group 우클릭 -> Add -> Sampler -> JDBC Request
		Variable Name of Pool declared in JDBC Connection Configuration : dbpool
		Query Type : Select Statement
		Query : SELECT * FROM member;

	Test Plan 우클릭 -> Listener -> View Result Tree

	Test Plan 우클릭 -> Listener -> Summary Report

sample 몇번 했는지
Average 응답 횟수
std. Dev. 표준 편차

Thread Group
	Number of Threads 			500		500		300		1000
	Ramp-up period 				0		0		0		0

JDBC Connection Configuration		
	Max Number of Connections 	1		100		300		5

	AVG						131		342		0		97
	에러						0		0		100		0

datadog 또는 pinpoint = 유료

Grafana + Prometheus -> 무료

가상머신 2대 추가로 준비 - ip 세팅만 우선

프로메테우스 
- 각종 데이터(특정 컴퓨터, 서버의 메트릭(cpu, 메모리, 메모리 사용량 등))를 수집하는 서버 프로그램


그라파나
- 각종 데이터 소스로부터 데이터를 불러와서 그래프로 보여주는 프로그램


프로메테우스 서버 설정하기 (port : 9090)

systemctl restart prometheus - 서버프로그램
systemctl restart prometheus-node-exporter - 수집기

1) 설치
	apt update
	apt -y install prometheus prometheus-node-exporter

  2) 실행
	systemctl restart prometheus 
	systemctl restart prometheus-node-exporter

  3) 확인
	윈도우에서 웹 브라우저로 http://프로메테우스IP:9090 접속 -> status -> Targets 확인


  4) 모니터링 대상 추가
	대상 컴퓨터에서
	apt -y install prometheus-node-exporter
	systemctl restart prometheus-node-exporter

  5) 프로메테우스 설정
	vi /etc/prometheus/prometheus.yml

  - job_name: node
    static_configs:
      - targets: ['localhost:9100', 'ip:9100']

  6) 설정 적용
	systemctl restart prometheus


그라파나 

1) 설치
	wget -q -O /usr/share/keyrings/grafana.key https://packages.grafana.com/gpg.key
	echo "deb [signed-by=/usr/share/keyrings/grafana.key] https://packages.grafana.com/oss/deb stable main" | tee -a /etc/apt/sources.list.d/grafana.list

	apt update
	apt -y install grafana


  2) 실행
	systemctl restart grafana-server

  3) 확인
	윈도우에서 웹 브라우저로 http://그라파IP:3000접속

	처음 ID, PW		admin, admin

  4) 설정
    (1) 데이터 소스 추가
	Connections -> Data Sources ->Add data source -> Prometheus -> 주소에 http://프로메테우스IP:9090 -> Save& Test


grafana dashboard - 대시보드 공유 사이트 - 원하는것 다운해서 사용가능

dashboard - new - import - 7362

3. MariaDB 데이터 수집
------------------------------------
	DB 서버 컴퓨터
------------------------------------
  1) 설치
	wget https://github.com/prometheus/mysqld_exporter/releases/download/v0.17.2/mysqld_exporter-0.17.2.linux-amd64.tar.gz
	tar zxvf mysqld_exporter-0.17.2.linux-amd64.tar.gz

  2) 설정
	cd mysqld_exporter-0.17.2.linux-amd64
	vi .my.cnf
		[client]
		user=exporter
		password=qwer1234
		host=127.0.0.1

	mariadb -u root -p
		CREATE USER 'exporter'@'localhost' IDENTIFIED BY 'qwer1234' WITH MAX_USER_CONNECTIONS 3;
		GRANT PROCESS, REPLICATION CLIENT, SELECT, SLAVE MONITOR ON *.* TO 'exporter'@'localhost';
		FLUSH PRIVILEGES;
		exit;

  3) 실행
	./mysqld_exporter

------------------------------------
	프로메테우스 서버 컴퓨터
------------------------------------

  1) 프로메테우스 설정
	vi /etc/prometheus/prometheus.yml 마지막 줄에 다음 내용 추가

  - job_name: node
    # If prometheus-node-exporter is installed, grab stats about the local
    # machine by default.
    static_configs:
      - targets: ['localhost:9100','10.10.10.100:9100']
        labels:
          instance: 'myhost'


  - job_name: db
    static_configs:
      - targets: ['10.10.10.100:9104']
        labels:
          instance: 'myhost'

  2) 설정 적용
	systemctl restart prometheus
